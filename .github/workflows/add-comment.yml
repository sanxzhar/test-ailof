name: Add comment

on:
  push:
    branches:
      - main

permissions:
  contents: write
  pull-requests: write

jobs:
  add-comment:
    name: Add comment
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Set up Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
        
      - name: Create new branch
        id: create_branch
        run: |
          NEW_BRANCH="add-comment-$(date +%Y%m%d%H%M%S)"
          echo "Creating new branch: $NEW_BRANCH"
          git checkout -b "$NEW_BRANCH"
          echo "branch=$NEW_BRANCH" >> $GITHUB_OUTPUT
      
      - name: Fetch latest changes
        run: git fetch origin main

      - name: Find modified files
        id: find_files
        run: |
          # Compare the current commit with the last commit on the main branch before the push
          git fetch origin main
          MODIFIED_FILES=$(git diff --name-only HEAD HEAD~1 | grep -v '^\.github/')
          echo "Modified files: $MODIFIED_FILES"
          echo "::set-output name=files::$MODIFIED_FILES"
        
      - name: Debug modified files
        run: |
          echo "Modified files: ${{ steps.find_files.outputs.files }}"
      
      - name: Append comment to modified files
        id: track_changes
        run: |
          NEW_LINE="logic new_string"
          CHANGED_FILES="${{ steps.find_files.outputs.files }}"
          NEW_LINE_LOCATION=""

          for file in $CHANGED_FILES; do
            echo "Processing file: $file"
            if [ -f "$file" ]; then
              LINE_NUMBER=$(wc -l < "$file")  # Get the last line number
              echo "$NEW_LINE" >> "$file"      # Append comment to file
              echo "Appended comment to $file at line $LINE_NUMBER"

              # Store file and line number for later use
              NEW_LINE_LOCATION="$NEW_LINE_LOCATION|$file:$LINE_NUMBER"
            fi
          done

          echo "new_line_locations=$NEW_LINE_LOCATION" >> $GITHUB_ENV
      
      - name: Print changes
        run: |
          echo "Changes after appending comments:"
          git diff

      - name: Verify changes exist
        id: verify_changes
        run: |
          if [ -n "$(git status --porcelain)" ]; then
            echo "Changes detected, proceeding with commit"
            echo "has_changes=true" >> $GITHUB_OUTPUT
          else
            echo "No changes detected, creating a dummy change"
            echo "This is a dummy change" >> dummy-change.md
            git add dummy-change.md
            echo "has_changes=true" >> $GITHUB_OUTPUT
          fi

      - name: Commit changes
        run: |
          git add .
          git commit -m "Append auto-generated comment to modified files"
      
      - name: Push changes
        run: |
          echo "Pushing branch: ${{ steps.create_branch.outputs.branch }}"
          git push --set-upstream origin "${{ steps.create_branch.outputs.branch }}"

      - name: Comment on the Pull Request
        uses: actions/github-script@v6
        env:
          COMMENT_LOCATIONS: ${{ env.comment_locations }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { owner, repo } = context.repo;
            const prNumber = (await github.rest.pulls.list({
              owner,
              repo,
              head: "${{ steps.create_branch.outputs.branch }}"
            })).data[0]?.number;

            if (!prNumber) {
              console.log("No PR found for the branch.");
              return;
            }

            const commentLocations = process.env.COMMENT_LOCATIONS.split('|').filter(Boolean);

            for (const location of commentLocations) {
              const [file, line] = location.split(':');
              console.log(`Commenting on ${file} at line ${line}`);

              await github.rest.pulls.createReviewComment({
                owner,
                repo,
                pull_number: prNumber,
                body: "This comment was auto-added: `logic new_string`",
                commit_id: context.sha,
                path: file,
                line: parseInt(line),
                side: "RIGHT"  // Ensures comment appears on the correct side of the diff
              });
            }

      # - name: Create Pull Request
      #   uses: actions/github-script@v6
      #   with:
      #     github-token: ${{ secrets.GITHUB_TOKEN }}
      #     script: |
      #       const branch = '${{ steps.create_branch.outputs.branch }}';
      #       const { owner, repo } = context.repo;
      #       const title = `Auto-generated PR for branch ${branch}`;
      #       const body = 'This pull request was auto-generated by GitHub Actions.';

      #       const { data: pr } = await github.rest.pulls.create({
      #         owner,
      #         repo,
      #         title,
      #         head: branch,
      #         base: 'main',
      #         body
      #       });

      #       console.log(`Pull request created: ${pr.html_url}`);