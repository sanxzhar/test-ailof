name: Add comment

on:
  push:
    branches:
      - main

permissions: write-all

jobs:
  add-comment:
    name: Add comment
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      - name: Set up Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
        
      - name: Create new branch
        id: create_branch
        run: |
          NEW_BRANCH="add-comment-$(date +%Y%m%d%H%M%S)"
          echo "Creating new branch: $NEW_BRANCH"
          git checkout -b "$NEW_BRANCH"
          echo "branch=$NEW_BRANCH" >> $GITHUB_OUTPUT
      
      - name: Fetch latest changes
        run: git fetch origin main

      - name: Find modified files
        id: find_files
        run: |
          # Compare the current commit with the last commit on the main branch before the push
          git fetch origin main
          MODIFIED_FILES=$(git diff --name-only HEAD HEAD~1 | grep -v '^\.github/')
          echo "Modified files: $MODIFIED_FILES"
          echo "::set-output name=files::$MODIFIED_FILES"
        
      - name: Debug modified files
        run: |
          echo "Modified files: ${{ steps.find_files.outputs.files }}"
      
      - name: Append comment to modified files
        run: |
          COMMENT="// Auto-generated comment added by GitHub Actions $(date)"
          for file in ${{ steps.find_files.outputs.files }}; do
            echo "Processing file: $file"
            if [ -f "$file" ]; then
              echo "$COMMENT" >> "$file"
              echo "Appended comment to $file"
            else
              echo "File not found: $file"
            fi
          done
      
      - name: Print changes
        run: |
          echo "Changes after appending comments:"
          git diff

      - name: Verify changes exist
        id: verify_changes
        run: |
          if [ -n "$(git status --porcelain)" ]; then
            echo "Changes detected, proceeding with commit"
            echo "has_changes=true" >> $GITHUB_OUTPUT
          else
            echo "No changes detected, creating a dummy change"
            echo "This is a dummy change" >> dummy-change.md
            git add dummy-change.md
            echo "has_changes=true" >> $GITHUB_OUTPUT
          fi

      - name: Commit changes
        run: |
          git add .
          git commit -m "Append auto-generated comment to modified files"
      
      - name: Push changes
        run: |
          echo "Pushing branch: ${{ steps.create_branch.outputs.branch }}"
          git push --set-upstream origin "${{ steps.create_branch.outputs.branch }}"

       - name: Create Pull Request
         uses: peter-evans/create-pull-request@v5
         with:
          token: ${{ secrets.PAT_TOKEN }}  # Use a personal access token with repo permissions
          branch: "${{ steps.create_branch.outputs.branch }}"
          title: "Auto-add comment to modified files"
          body: "This pull request adds auto-generated content."
          base: main
          delete-branch: false
      # - name: Create PR manually
      #   run: |
      #     PR_RESPONSE=$(curl -X POST -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
      #          -H "Accept: application/vnd.github.v3+json" \
      #          https://api.github.com/repos/${{ github.repository }}/pulls \
      #          -d '{
      #            "title": "Auto-add comment to modified files", 
      #            "body": "This pull request adds auto-generated content.", 
      #            "head": "${{ steps.create_branch.outputs.branch }}", 
      #            "base": "main"
      #          }')
      #     echo "PR creation response: $PR_RESPONSE"
      #     PR_URL=$(echo $PR_RESPONSE | jq -r .html_url)
      #     if [ "$PR_URL" != "null" ]; then
      #       echo "PR created: $PR_URL"
      #     else
      #       echo "PR creation failed. Response: $PR_RESPONSE"
      #     fi
      # - name: Create PR manually
      #   run: |
      #     PR_RESPONSE=$(curl -X POST -H "Authorization: token ${{ secrets.PAT_TOKEN }}" \
      #          -H "Accept: application/vnd.github.v3+json" \
      #          https://api.github.com/repos/${{ github.repository }}/pulls \
      #          -d '{
      #            "title": "Auto-add comment to modified files", 
      #            "body": "This pull request adds auto-generated content.", 
      #            "head": "${{ steps.create_branch.outputs.branch }}", 
      #            "base": "main"
      #          }')
      #     echo "PR creation response: $PR_RESPONSE"
      #     PR_URL=$(echo $PR_RESPONSE | jq -r .html_url)
      #     if [ "$PR_URL" != "null" ]; then
      #       echo "PR created: $PR_URL"
      #     else
      #       echo "PR creation failed. Response: $PR_RESPONSE"
      #     fi
        
      # - name: Create Pull Request
      #   uses: peter-evans/create-pull-request@v3
      #   with:
      #     # token: ${{ secrets.GITHUB_TOKEN }}
      #     # commit-message: "Append auto-generated comment to modified files"
      #     # branch: "${{ steps.create_branch.outputs.branch }}"
      #     # title: "Auto-add comment to modified files"
      #     # body: "This pull request appends an auto-generated comment to the end of modified files."
      #     # base: main
      #     # delete-branch: false
      #     # draft: false
      #     token: ${{ secrets.GITHUB_TOKEN }}
      #     commit-message: "Append auto-generated comment to modified files"
      #     branch: "${{ steps.create_branch.outputs.branch }}"
      #     title: "Auto-add comment to modified files"
      #     body: "This pull request appends an auto-generated comment to the end of modified files."
      #     base: main
      #     delete-branch: false

